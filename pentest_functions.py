# pentest_functions.py
import subprocess

def check_command_injection(user_input):
    # Check for potential command injection vulnerabilities in user input
    # For simplicity, this example checks for the presence of semicolons
    if ';' in user_input:
        return "Potential command injection detected in user input."
    return "No command injection vulnerabilities detected."

def check_sql_injection(user_input):
    # Check for potential SQL injection vulnerabilities in user input
    # For simplicity, this example checks for the presence of SQL keywords
    sql_keywords = ['SELECT', 'FROM', 'WHERE', 'DROP', 'INSERT', 'UPDATE']
    for keyword in sql_keywords:
        if keyword in user_input.upper():
            return "Potential SQL injection detected in user input."
    return "No SQL injection vulnerabilities detected."

def check_xss_vulnerability(user_input):
    # Check for potential Cross-Site Scripting (XSS) vulnerabilities in user input
    # For simplicity, this example checks for the presence of script tags
    if '<script>' in user_input.lower():
        return "Potential XSS vulnerability detected in user input."
    return "No XSS vulnerabilities detected."

def check_insecure_dependencies():
    # Check for vulnerabilities in third-party libraries using a tool like safety
    try:
        subprocess.run(['safety', 'check'], check=True)
        return "No insecure dependencies detected."
    except subprocess.CalledProcessError:
        return "Insecure dependencies detected. Check the security of third-party libraries."

def perform_security_audit():
    # Perform a general security audit using a tool like Bandit
    try:
        subprocess.run(['bandit', '-r', '.'], check=True)
        return "Security audit passed. No security issues found."
    except subprocess.CalledProcessError:
        return "Security audit failed. Check the script for potential security issues."
